
@page "/Passwords"
@inject IPasswordClientService PasswordClientService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@attribute [Authorize]

<AuthorizeView>
	<Authorized>
		<PageTitle>Passwords</PageTitle>
		<div class="col-12 row" style="text-align:left; font-weight:bold">
			<span class="col-12" style="color:red">@ServiceMesssage</span>
		</div>
		@*<button class="col-sm-2 custombtn p-2" title="Create New" @onclick="CreateUser">Create New Credintial</button>*@
		<div class="margin-top:10px;height:1px;background-color:black" />
		<table class="table">
			<thead>
				<tr>
					<th>Name</th>
					<th>SiteURL</th>
					<th>UserName</th>
					<th>Facilities</th>
					<th></th>
				</tr>
			</thead>
			<tbody>
				@foreach (var password in PasswordList)
				{
					<tr>
						<td>@password.Name</td>
						<td>@password.SiteURL</td>
						<td>@password.UserName</td>
						<td>
							<div>								
									@*<button class="custombtn p-1" title="Edit" @onclick="(() => EditUser(user.Id))"><i class="oi oi-pencil"></i></button>
									<button class="customdelbtn p-1" title="Delete" @onclick="(() => DeleteUser(user))"><i class="oi oi-trash"></i></button>*@
							</div>
						</td>

					</tr>
				}
			</tbody>
		</table>
		

</Authorized>
	<NotAuthorized>
		<p role="alert">You're not authorized</p>
	</NotAuthorized>
</AuthorizeView>



@code {
	public List<PasswordListItemDTO> PasswordList = new();
	public string ServiceMesssage { get; set; } = string.Empty;


	protected override async Task OnInitializedAsync()
	{
		var result = await PasswordClientService.GetPasswordList();
		if (result.Success)
		{
			PasswordList = result.Data;
		}
		else
		{
			ServiceMesssage = result.Error;
		}

	}

	//private void EditUser(string id)
	//{
	//	NavigationManager.NavigateTo($"EditUser/{id}");
	//}

	//private void CreateUser()
	//{
	//	NavigationManager.NavigateTo("CreateUser");
	//}


	//private async void DeleteUser(UserListItemDTO input)
	//{
	//	var result = await UserClientService.DeleteUser(input);
	//	if (result.Success)
	//	{
	//		var loadresult = await UserClientService.GetUserList();
	//		if (loadresult.Success)
	//		{
	//			UsersList = loadresult.Data;
	//				await InvokeAsync(() =>
 //               {

 //                   StateHasChanged();
 //               });
	//		}
	//		else
	//		{
	//			ServiceMesssage = result.Error;
	//		}
	//	}
	//	else
	//	{
	//		ServiceMesssage = result.Error;
	//	}
	//}

}
